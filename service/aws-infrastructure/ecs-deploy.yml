Parameters:
  DockerImage:
    Type: String
    Description: "Docker image of the language recognize service. Must be in your ECR repo."
  SubnetID:
    Type: String
    Description: "ID of subnet in which to deploy"

Resources:
  ###############################################
  # Cluster
  ###############################################
  FargateCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: LanguageRecognizeCluster
      CapacityProviders:
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Tags:
        - Key: Name
          Value: LanguageRecognizeCluster
        - Key: Description
          Value: "Cluster to run the language recognize on docker with AWS Fargate"

  ###############################################
  # Task Definition
  ###############################################
  LangRecTask:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Cpu: 256
      Memory: 512
      Family: LanguageRecognize
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      Tags:
        - Key: Name
          Value: LangRecTask
        - Key: Description
          Value: "Task definition to run the language recognize service in containers"
      ContainerDefinitions:
        - Name: LangRecContainer
          PortMappings:
            - HostPort: 80
              ContainerPort: 80
          Image: !Ref DockerImage

  ###############################################
  # Service Definition
  ###############################################
  LangRecService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref FargateCluster
      LaunchType: FARGATE
      ServiceName: LanguageRecognizeService
      TaskDefinition: !Ref LangRecTask
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt LRSecurityGroup.GroupId
          Subnets:
            - !Ref SubnetID

  ###############################################
  # Networking (VPC)
  ###############################################
  LRSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow HTTP Access"
      GroupName: LRSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: LRSecurityGroup

  ###############################################
  # IAM Task Execution Role
  ###############################################
  TaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "ECSTaskExecRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "*"

